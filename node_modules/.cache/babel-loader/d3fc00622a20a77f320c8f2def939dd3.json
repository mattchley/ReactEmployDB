{"ast":null,"code":"var _jsxFileName = \"/Users/matthewatchley/Desktop/ReactEmployDB/src/App.js\";\nimport React, { Component } from \"react\";\nimport ManagerCard from \"./components/ManagerCard\";\nimport EngineerCard from \"./components/EngineerCard\";\nimport InternCard from \"./components/InternCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport employee from \"./employee.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      employee\n    };\n\n    this.removeEmployee = id => {\n      // Filter this.state.employee for employee with an id not equal to the id being removed\n      const employee = this.state.employee.filter(employee => employee.id !== id); // Set this.state.employee equal to the new employee array\n\n      this.setState({\n        employee\n      });\n    };\n\n    this.renderManager = () => {\n      // finds the right thing but now needs to write onto it\n      // maybe put the info in the comonents?\n      const manager = this.state.employee.filter(employee => employee.occupation === \"Restaurant Owner\");\n      this.state.employee.map(employee => React.createElement(ManagerCard, {\n        removeemployee: this.removeemployee,\n        id: employee.id,\n        key: employee.id,\n        name: employee.name,\n        image: employee.image,\n        occupation: employee.occupation,\n        location: employee.location,\n        officeNum: employee.officeNum,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }));\n    };\n\n    this.renderEngineer = () => {\n      // finds the right thing but now needs to write onto it\n      // maybe put the info in the comonents?\n      if (this.state.employee.map(employee => employee.occupation === \"Cashier\")) {\n        return React.createElement(EngineerCard, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.renderIntern = () => {\n      // finds the right thing but now needs to write onto it\n      // maybe put the info in the comonents?\n      if (this.state.employee.map(employee => employee.occupation === \"Fry Cook\")) {\n        return React.createElement(InternCard, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        });\n      }\n    };\n  }\n\n  // Needs a short circuit for each card to only render the employee type\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Employee List\"), this.renderManager);\n  }\n\n}\n\nexport default App; // Conditional render\n// import React, { Component } from \"react\";\n// import NavTabs from \"./NavTabs\";\n// import Home from \"./pages/Home\";\n// import About from \"./pages/About\";\n// import Blog from \"./pages/Blog\";\n// import Contact from \"./pages/Contact\";\n// class Portfolio extends Component {\n//   state = {\n//     currentPage: \"Home\"\n//   };\n//   handlePageChange = page => {\n//     this.setState({ currentPage: page });\n//   };\n//   renderPage = () => {\n//     if (this.state.currentPage === \"Home\") {\n//       return <Home />;\n//     } else if (this.state.currentPage === \"About\") {\n//       return <About />;\n//     } else if (this.state.currentPage === \"Blog\") {\n//       return <Blog />;\n//     } else {\n//       return <Contact />;\n//     }\n//   };\n//   render() {\n//     return (\n//       <div>\n//         <NavTabs\n//           currentPage={this.state.currentPage}\n//           handlePageChange={this.handlePageChange}\n//         />\n//         {this.renderPage()}\n//       </div>\n//     );\n//   }\n// }\n// export default Portfolio;\n// renderPage = () => {\n//   if (this.state.employee.occupation === \"Restaurant Owner\") {\n//     return <ManagerCard />;\n//   } else if (this.state.employee.occupation === \"Cashier\") {\n//     return <EngineerCard />;\n//   } else if (this.state.employee.occupation === \"Fry Cook\") {\n//     return <InternCard />;\n//   }\n// };\n// // Needs a short circuit for each card to only render the employee type\n// render() {\n//   return (\n//     <Wrapper>\n//       <Title>Employee List</Title>\n//       {this.renderPage()}\n//     </Wrapper>\n//   );\n// }\n// }\n// {this.state.employee.map(employee => (\n//   <ManagerCard\n//     removeemployee={this.removeemployee}\n//     id={employee.id}\n//     key={employee.id}\n//     name={employee.name}\n//     image={employee.image}\n//     occupation={employee.occupation}\n//     location={employee.location}\n//     officeNum={employee.officeNum}\n//   />\n// ))}\n// {this.state.employee.map(employee => (\n//   <EngineerCard\n//     removeemployee={this.removeemployee}\n//     id={employee.id}\n//     key={employee.id}\n//     name={employee.name}\n//     image={employee.image}\n//     occupation={employee.occupation}\n//     location={employee.location}\n//     githubURL={employee.githubURL}\n//   />\n// ))}\n// {this.state.employee.map(employee => (\n//   <InternCard\n//     removeemployee={this.removeemployee}\n//     id={employee.id}\n//     key={employee.id}\n//     name={employee.name}\n//     image={employee.image}\n//     occupation={employee.occupation}\n//     location={employee.location}\n//     school={employee.school}\n//   />\n// ))}","map":{"version":3,"sources":["/Users/matthewatchley/Desktop/ReactEmployDB/src/App.js"],"names":["React","Component","ManagerCard","EngineerCard","InternCard","Wrapper","Title","employee","App","state","removeEmployee","id","filter","setState","renderManager","manager","occupation","map","removeemployee","name","image","location","officeNum","renderEngineer","renderIntern","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,QAAP,MAAqB,iBAArB;;AAEA,MAAMC,GAAN,SAAkBP,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BQ,KAF0B,GAElB;AACNF,MAAAA;AADM,KAFkB;;AAAA,SAM1BG,cAN0B,GAMTC,EAAE,IAAI;AACrB;AACA,YAAMJ,QAAQ,GAAG,KAAKE,KAAL,CAAWF,QAAX,CAAoBK,MAApB,CAA2BL,QAAQ,IAAIA,QAAQ,CAACI,EAAT,KAAgBA,EAAvD,CAAjB,CAFqB,CAGrB;;AACA,WAAKE,QAAL,CAAc;AAAEN,QAAAA;AAAF,OAAd;AACD,KAXyB;;AAAA,SAa1BO,aAb0B,GAaV,MAAM;AACpB;AACA;AACA,YAAMC,OAAO,GAAG,KAAKN,KAAL,CAAWF,QAAX,CAAoBK,MAApB,CAA2BL,QAAQ,IAAIA,QAAQ,CAACS,UAAT,KAAwB,kBAA/D,CAAhB;AAEA,WAAKP,KAAL,CAAWF,QAAX,CAAoBU,GAApB,CAAwBV,QAAQ,IAC9B,oBAAC,WAAD;AACE,QAAA,cAAc,EAAE,KAAKW,cADvB;AAEE,QAAA,EAAE,EAAEX,QAAQ,CAACI,EAFf;AAGE,QAAA,GAAG,EAAEJ,QAAQ,CAACI,EAHhB;AAIE,QAAA,IAAI,EAAEJ,QAAQ,CAACY,IAJjB;AAKE,QAAA,KAAK,EAAEZ,QAAQ,CAACa,KALlB;AAME,QAAA,UAAU,EAAEb,QAAQ,CAACS,UANvB;AAOE,QAAA,QAAQ,EAAET,QAAQ,CAACc,QAPrB;AAQE,QAAA,SAAS,EAAEd,QAAQ,CAACe,SARtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAWD,KA7ByB;;AAAA,SA+B1BC,cA/B0B,GA+BT,MAAM;AACrB;AACA;AACA,UAAI,KAAKd,KAAL,CAAWF,QAAX,CAAoBU,GAApB,CAAwBV,QAAQ,IAAIA,QAAQ,CAACS,UAAT,KAAwB,SAA5D,CAAJ,EAA4E;AAC1E,eAAO,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF,KArCyB;;AAAA,SAuC1BQ,YAvC0B,GAuCX,MAAM;AACnB;AACA;AACA,UAAI,KAAKf,KAAL,CAAWF,QAAX,CAAoBU,GAApB,CAAwBV,QAAQ,IAAIA,QAAQ,CAACS,UAAT,KAAwB,UAA5D,CAAJ,EAA6E;AAC3E,eAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF,KA7CyB;AAAA;;AA+C1B;AACAS,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEG,KAAKX,aAFR,CADF;AAMD;;AAvDyB;;AA0D5B,eAAeN,GAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from \"react\";\nimport ManagerCard from \"./components/ManagerCard\";\nimport EngineerCard from \"./components/EngineerCard\";\nimport InternCard from \"./components/InternCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport employee from \"./employee.json\";\n\nclass App extends Component {\n  // Setting this.state.employee to the employee json array\n  state = {\n    employee\n  };\n\n  removeEmployee = id => {\n    // Filter this.state.employee for employee with an id not equal to the id being removed\n    const employee = this.state.employee.filter(employee => employee.id !== id);\n    // Set this.state.employee equal to the new employee array\n    this.setState({ employee });\n  };\n\n  renderManager = () => {\n    // finds the right thing but now needs to write onto it\n    // maybe put the info in the comonents?\n    const manager = this.state.employee.filter(employee => employee.occupation === \"Restaurant Owner\")\n\n    this.state.employee.map(employee =>\n      <ManagerCard\n        removeemployee={this.removeemployee}\n        id={employee.id}\n        key={employee.id}\n        name={employee.name}\n        image={employee.image}\n        occupation={employee.occupation}\n        location={employee.location}\n        officeNum={employee.officeNum} />\n    )\n  };\n\n  renderEngineer = () => {\n    // finds the right thing but now needs to write onto it\n    // maybe put the info in the comonents?\n    if (this.state.employee.map(employee => employee.occupation === \"Cashier\")) {\n      return <EngineerCard />;\n    }\n  };\n\n  renderIntern = () => {\n    // finds the right thing but now needs to write onto it\n    // maybe put the info in the comonents?\n    if (this.state.employee.map(employee => employee.occupation === \"Fry Cook\")) {\n      return <InternCard />;\n    }\n  };\n\n  // Needs a short circuit for each card to only render the employee type\n  render() {\n    return (\n      <Wrapper>\n        <Title>Employee List</Title>\n        {this.renderManager}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n\n\n// Conditional render\n// import React, { Component } from \"react\";\n// import NavTabs from \"./NavTabs\";\n// import Home from \"./pages/Home\";\n// import About from \"./pages/About\";\n// import Blog from \"./pages/Blog\";\n// import Contact from \"./pages/Contact\";\n\n// class Portfolio extends Component {\n//   state = {\n//     currentPage: \"Home\"\n//   };\n\n//   handlePageChange = page => {\n//     this.setState({ currentPage: page });\n//   };\n\n//   renderPage = () => {\n//     if (this.state.currentPage === \"Home\") {\n//       return <Home />;\n//     } else if (this.state.currentPage === \"About\") {\n//       return <About />;\n//     } else if (this.state.currentPage === \"Blog\") {\n//       return <Blog />;\n//     } else {\n//       return <Contact />;\n//     }\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <NavTabs\n//           currentPage={this.state.currentPage}\n//           handlePageChange={this.handlePageChange}\n//         />\n//         {this.renderPage()}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Portfolio;\n\n// renderPage = () => {\n//   if (this.state.employee.occupation === \"Restaurant Owner\") {\n//     return <ManagerCard />;\n//   } else if (this.state.employee.occupation === \"Cashier\") {\n//     return <EngineerCard />;\n//   } else if (this.state.employee.occupation === \"Fry Cook\") {\n//     return <InternCard />;\n//   }\n// };\n\n// // Needs a short circuit for each card to only render the employee type\n// render() {\n//   return (\n//     <Wrapper>\n//       <Title>Employee List</Title>\n//       {this.renderPage()}\n//     </Wrapper>\n//   );\n// }\n// }\n\n\n// {this.state.employee.map(employee => (\n//   <ManagerCard\n//     removeemployee={this.removeemployee}\n//     id={employee.id}\n//     key={employee.id}\n//     name={employee.name}\n//     image={employee.image}\n//     occupation={employee.occupation}\n//     location={employee.location}\n//     officeNum={employee.officeNum}\n//   />\n// ))}\n// {this.state.employee.map(employee => (\n//   <EngineerCard\n//     removeemployee={this.removeemployee}\n//     id={employee.id}\n//     key={employee.id}\n//     name={employee.name}\n//     image={employee.image}\n//     occupation={employee.occupation}\n//     location={employee.location}\n//     githubURL={employee.githubURL}\n//   />\n// ))}\n// {this.state.employee.map(employee => (\n//   <InternCard\n//     removeemployee={this.removeemployee}\n//     id={employee.id}\n//     key={employee.id}\n//     name={employee.name}\n//     image={employee.image}\n//     occupation={employee.occupation}\n//     location={employee.location}\n//     school={employee.school}\n//   />\n// ))}"]},"metadata":{},"sourceType":"module"}